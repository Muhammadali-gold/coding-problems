package com.robocontest.list;

import java.io.PrintWriter;
import java.util.Scanner;


// from bisect import bisect
// arr=[0,1,2,3,4,5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 48, 56, 64, 72, 80, 96, 108, 120, 144, 168, 192, 216, 240, 288, 324, 360, 432, 504, 576, 648, 720, 864, 972, 1152, 1296, 1440, 1728, 2016, 2304, 2592, 2880, 3456, 3888, 4608, 5184, 5760, 6912, 8064, 9216, 10080, 11520, 12960, 14400, 17280, 19440, 23040, 25920, 28800, 34560, 40320, 46080, 50400, 57600, 64800, 72000, 86400, 97200, 103680, 116640, 138240, 155520, 172800, 207360, 241920, 276480, 302400, 345600, 388800, 432000, 518400, 583200, 622080, 699840, 829440, 933120, 1088640, 1209600, 1451520, 1693440, 1935360, 2116800, 2419200, 2721600, 3024000, 3628800, 4082400, 4354560, 4898880, 5806080, 6531840, 7620480, 8467200, 11612160, 13547520, 15482880, 16934400, 19353600, 21772800, 24192000, 29030400, 32659200, 34836480, 39191040, 46448640, 52254720, 60963840, 67737600, 92897280, 104509440, 121927680, 139345920, 152409600, 174182400, 195955200, 217728000, 261273600, 293932800, 313528320, 352719360, 418037760, 470292480, 548674560, 609638400, 836075520, 940584960, 1045094400, 1219276800, 1393459200, 1524096000, 1741824000, 1959552000, 2177280000, 2612736000, 2939328000, 3135283200, 3527193600, 4180377600, 4702924800, 5486745600, 6096384000, 8360755200, 9405849600, 10346434560, 11496038400, 13412044800, 15328051200, 16765056000, 19160064000, 21555072000, 23950080000, 28740096000, 32332608000, 34488115200, 38799129600, 45984153600, 51732172800, 60354201600, 67060224000, 91968307200, 100329062400, 112870195200, 124157214720, 137952460800, 160944537600, 183936614400, 201180672000, 229920768000, 258660864000, 287400960000, 344881152000, 387991296000, 413857382400, 465589555200, 551809843200, 620786073600, 724250419200, 804722688000, 1195587993600, 1304277811200, 1467312537600, 1614043791360, 1793381990400, 2092278988800, 2391175987200, 2615348736000, 2988969984000, 3362591232000, 3736212480000, 4483454976000, 5043886848000, 5380145971200, 6052664217600, 7173527961600, 8070218956800, 9415255449600, 10139505868800, 11266117632000, 16738231910400, 18259889356800, 20542375526400, 22596613079040, 25107347865600, 29291905843200, 33476463820800, 36614882304000, 41845579776000, 47076277248000, 52306974720000, 62768369664000, 70614415872000, 75322043596800, 84737299046400, 107602919424000, 121053284352000, 141228831744000, 152092588032000, 168991764480000, 251073478656000, 273898340352000, 308135632896000, 338949196185600, 376610217984000, 439378587648000, 502146957312000, 549223234560000, 627683696640000, 706144158720000, 784604620800000, 941525544960000, 1004293914624000, 1129830653952000, 1205152697548800, 1355796784742400, 1721646710784000, 1936852549632000, 2259661307904000, 2433481408512000, 2703868231680000, 4017175658496000, 4382373445632000, 4930170126336000, 5423187138969600, 6025763487744000, 7030057402368000, 8034351316992000, 8787571752960000, 10670622842880000, 12004450698240000, 13338278553600000, 16005934264320000, 17072996548608000, 19207121117184000, 20487595858329600, 23048545340620800, 29267994083328000, 32926493343744000, 38414242234368000, 41369183944704000, 45965759938560000, 68291986194432000, 74500348575744000, 83812892147712000, 92194181362483200, 108463742779392000, 126541033242624000, 144618323705856000, 158176291553280000, 192071211171840000, 216080112568320000, 240089013964800000, 288106816757760000, 307313937874944000, 345728180109312000, 368776725449932800, 414873816131174400, 526823893499904000, 592676880187392000, 691456360218624000, 744645311004672000, 827383678894080000]
// t=int(input())
// for i in range(t):
//   left,right=map(int,input().split())
//   if left in arr:
//     left-=1
//   if right in arr:
//     right+=1
//   leftIndex=bisect(arr,left)
//   rightIndex=bisect(arr,right)
//   print(rightIndex-leftIndex)

public class ProblemN035 {
    public static void solve(){
        Scanner sc = new Scanner(System.in);
        PrintWriter pw = new PrintWriter(System.out);
        long[] arr = new long[]{0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 12L, 14L, 16L, 18L, 20L, 24L, 28L, 32L, 36L, 40L, 48L, 56L, 64L, 72L, 80L, 96L, 108L, 120L, 144L, 168L, 192L, 216L, 240L, 288L, 324L, 360L, 432L, 504L, 576L, 648L, 720L, 864L, 972L, 1152L, 1296L, 1440L, 1728L, 2016L, 2304L, 2592L, 2880L, 3456L, 3888L, 4608L, 5184L, 5760L, 6912L, 8064L, 9216L, 10080L, 11520L, 12960L, 14400L, 17280L, 19440L, 23040L, 25920L, 28800L, 34560L, 40320L, 46080L, 50400L, 57600L, 64800L, 72000L, 86400L, 97200L, 103680L, 116640L, 138240L, 155520L, 172800L, 207360L, 241920L, 276480L, 302400L, 345600L, 388800L, 432000L, 518400L, 583200L, 622080L, 699840L, 829440L, 933120L, 1088640L, 1209600L, 1451520L, 1693440L, 1935360L, 2116800L, 2419200L, 2721600L, 3024000L, 3628800L, 4082400L, 4354560L, 4898880L, 5806080L, 6531840L, 7620480L, 8467200L, 11612160L, 13547520L, 15482880L, 16934400L, 19353600L, 21772800L, 24192000L, 29030400L, 32659200L, 34836480L, 39191040L, 46448640L, 52254720L, 60963840L, 67737600L, 92897280L, 104509440L, 121927680L, 139345920L, 152409600L, 174182400L, 195955200L, 217728000L, 261273600L, 293932800L, 313528320L, 352719360L, 418037760L, 470292480L, 548674560L, 609638400L, 836075520L, 940584960L, 1045094400L, 1219276800L, 1393459200L, 1524096000L, 1741824000L, 1959552000L, 2177280000L, 2612736000L, 2939328000L, 3135283200L, 3527193600L, 4180377600L, 4702924800L, 5486745600L, 6096384000L, 8360755200L, 9405849600L, 10346434560L, 11496038400L, 13412044800L, 15328051200L, 16765056000L, 19160064000L, 21555072000L, 23950080000L, 28740096000L, 32332608000L, 34488115200L, 38799129600L, 45984153600L, 51732172800L, 60354201600L, 67060224000L, 91968307200L, 100329062400L, 112870195200L, 124157214720L, 137952460800L, 160944537600L, 183936614400L, 201180672000L, 229920768000L, 258660864000L, 287400960000L, 344881152000L, 387991296000L, 413857382400L, 465589555200L, 551809843200L, 620786073600L, 724250419200L, 804722688000L, 1195587993600L, 1304277811200L, 1467312537600L, 1614043791360L, 1793381990400L, 2092278988800L, 2391175987200L, 2615348736000L, 2988969984000L, 3362591232000L, 3736212480000L, 4483454976000L, 5043886848000L, 5380145971200L, 6052664217600L, 7173527961600L, 8070218956800L, 9415255449600L, 10139505868800L, 11266117632000L, 16738231910400L, 18259889356800L, 20542375526400L, 22596613079040L, 25107347865600L, 29291905843200L, 33476463820800L, 36614882304000L, 41845579776000L, 47076277248000L, 52306974720000L, 62768369664000L, 70614415872000L, 75322043596800L, 84737299046400L, 107602919424000L, 121053284352000L, 141228831744000L, 152092588032000L, 168991764480000L, 251073478656000L, 273898340352000L, 308135632896000L, 338949196185600L, 376610217984000L, 439378587648000L, 502146957312000L, 549223234560000L, 627683696640000L, 706144158720000L, 784604620800000L, 941525544960000L, 1004293914624000L, 1129830653952000L, 1205152697548800L, 1355796784742400L, 1721646710784000L, 1936852549632000L, 2259661307904000L, 2433481408512000L, 2703868231680000L, 4017175658496000L, 4382373445632000L, 4930170126336000L, 5423187138969600L, 6025763487744000L, 7030057402368000L, 8034351316992000L, 8787571752960000L, 10670622842880000L, 12004450698240000L, 13338278553600000L, 16005934264320000L, 17072996548608000L, 19207121117184000L, 20487595858329600L, 23048545340620800L, 29267994083328000L, 32926493343744000L, 38414242234368000L, 41369183944704000L, 45965759938560000L, 68291986194432000L, 74500348575744000L, 83812892147712000L, 92194181362483200L, 108463742779392000L, 126541033242624000L, 144618323705856000L, 158176291553280000L, 192071211171840000L, 216080112568320000L, 240089013964800000L, 288106816757760000L, 307313937874944000L, 345728180109312000L, 368776725449932800L, 414873816131174400L, 526823893499904000L, 592676880187392000L, 691456360218624000L, 744645311004672000L, 827383678894080000L};

//        pw.println(arr[0]);

        int leftIndex = 0, rightIndex = 0, t;
        long leftLimit = 0, rightLimit = 0;

        t = sc.nextInt();

        while (t > 0){
            t--;
            leftLimit = sc.nextLong();
            rightLimit = sc.nextLong();
            int i=0;
            while (i < arr.length){
                if (arr[i] >= leftLimit){
                    leftIndex = i;
//                    if (arr[i] == leftLimit){
//                        leftIndex--;
//                    }
                    break;
                }
                i++;
            }

            int j=0;
            while (j<arr.length){
                if (arr[j] > rightLimit){
                    rightIndex = j;
                    if (arr[j] == rightLimit){
                        rightIndex++;
                    }
                    break;
                }
                j++;
            }
            pw.println(rightIndex-leftIndex);
        }


//         int a = sc.nextInt();
//         int abs_a = Math.abs(a);

//         if (a==0){
//             pw.println(-1);
//             pw.close();
//             return;
//         }

//         long currentTimeMillis = System.currentTimeMillis();
//         int count=0;

//         List<Integer> arr = new ArrayList<>();
//         for (int i = 1; i*i < abs_a; i++) {
//             if (a%i==0) {
//                 arr.add(i);
//             }
//         }
//         for (int i = (int) Math.sqrt(abs_a); i>= 1; i--) {
//             if (a%i==0) {
//                 arr.add(a/i);
//             }
//         }


//         for (int t = 0; t < arr.size(); t++) {
// //            for (int j = 1; j <= Math.abs(a); j++) {
//             int i=arr.get(t);
//             int j=abs_a/i;
//             if (i*j == a && i<=j){
//                     count++;
//                 }
//                 if (-i*j == a){
//                     count++;
//                 }
//                 if (i*j==a && i>=j){
//                     count++;
//                 }
// //            }
//         }
//         pw.println(count);
//         long currentTimeMillis1 = System.currentTimeMillis();
// //        pw.println(currentTimeMillis1-currentTimeMillis);





        pw.flush();
        pw.close();
    }
}



